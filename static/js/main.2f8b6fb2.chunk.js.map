{"version":3,"sources":["types/FilterType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterType","TodoList","todos","selectedTodo","setSelectedTodo","className","map","todo","isSelected","id","cn","completed","title","type","onClick","TodoFilter","query","setQuery","filterByStatus","setFilterByStatus","value","onChange","event","target","All","Active","Completed","placeholder","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onClose","useState","isModalLoading","setIsModalLoading","user","setUser","useMemo","userId","finally","href","email","name","baseTodo","App","setTodos","isListLoading","setIsListLoading","useEffect","filteredTodos","sourceTodos","filterBy","currentQuery","filter","toLowerCase","includes","filterTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f8b6fb2.chunk.js","sourcesContent":["export enum FilterType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React, { Dispatch, SetStateAction } from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: Todo;\n  setSelectedTodo: Dispatch<SetStateAction<Todo>>;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  setSelectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        const isSelected = todo.id === selectedTodo.id;\n\n        return (\n          <tr\n            data-cy=\"todo\"\n            className={cn({\n              'has-background-info-light': isSelected,\n            })}\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={cn({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => setSelectedTodo(todo)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={cn('far', {\n                      'fa-eye': !isSelected,\n                      'fa-eye-slash': isSelected,\n                    })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import React, { Dispatch, SetStateAction } from 'react';\nimport { FilterType } from '../../types/FilterType';\n\ntype Props = {\n  query: string,\n  setQuery: Dispatch<SetStateAction<string>>,\n  filterByStatus: string,\n  setFilterByStatus: Dispatch<SetStateAction<string>>,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  setQuery,\n  filterByStatus,\n  setFilterByStatus,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filterByStatus}\n          onChange={(event) => setFilterByStatus(event.target.value)}\n        >\n          <option value={FilterType.All}>All</option>\n          <option value={FilterType.Active}>Active</option>\n          <option value={FilterType.Completed}>Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => setQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right queryIcon\">\n          <button\n            aria-label=\"clearSearchButton\"\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => setQuery('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, {\n  useMemo,\n  useState,\n} from 'react';\nimport cn from 'classnames';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedTodo: Todo;\n  onClose: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  onClose,\n}) => {\n  const [isModalLoading, setIsModalLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  useMemo(() => {\n    setIsModalLoading(true);\n    getUser(selectedTodo.userId)\n      .then(setUser)\n      .finally(() => setIsModalLoading(false));\n  }, [selectedTodo, setIsModalLoading]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isModalLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            <button\n              aria-label=\"modal-close\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong\n                className={cn({\n                  'has-text-danger': !selectedTodo.completed,\n                  'has-text-success': selectedTodo.completed,\n                })}\n              >\n                {selectedTodo.completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { FilterType } from './types/FilterType';\n\nconst baseTodo: Todo = {\n  id: 0,\n  title: '',\n  completed: false,\n  userId: 0,\n};\n\nconst filterTodos = (sourceTodos: Todo[], filterBy: FilterType | string, currentQuery: string) => {\n  let filteredTodos: Todo[];\n\n  switch (filterBy) {\n    case FilterType.Active:\n      filteredTodos = sourceTodos.filter(todo => !todo.completed);\n      break;\n\n    case FilterType.Completed:\n      filteredTodos = sourceTodos.filter(todo => todo.completed);\n      break;\n\n    default:\n      filteredTodos = [...sourceTodos];\n      break;\n  }\n\n  if (currentQuery) {\n    filteredTodos = filteredTodos\n      .filter(todo => todo.title.toLowerCase().includes(currentQuery.toLowerCase()));\n  }\n\n  return filteredTodos;\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([baseTodo]);\n  const [selectedTodo, setSelectedTodo] = useState(baseTodo);\n  const [isListLoading, setIsListLoading] = useState(false);\n  const [query, setQuery] = useState('');\n  const [filterByStatus, setFilterByStatus] = useState<string>(FilterType.All);\n\n  useEffect(() => {\n    setIsListLoading(true);\n    getTodos().then(setTodos).finally(() => setIsListLoading(false));\n  }, []);\n\n  const filteredTodos = filterTodos(todos, filterByStatus, query);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                filterByStatus={filterByStatus}\n                setFilterByStatus={setFilterByStatus}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isListLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={filteredTodos}\n                  selectedTodo={selectedTodo}\n                  setSelectedTodo={setSelectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {(selectedTodo !== baseTodo) && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          onClose={() => {\n            setSelectedTodo(baseTodo);\n          }}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}